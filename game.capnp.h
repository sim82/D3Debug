// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: game.capnp

#ifndef CAPNP_INCLUDED_ace601020add72c7_
#define CAPNP_INCLUDED_ace601020add72c7_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(fa709b01781b09f3);
CAPNP_DECLARE_SCHEMA(a8e8cba1fb4773ed);
CAPNP_DECLARE_SCHEMA(922e00f12518caf1);
CAPNP_DECLARE_SCHEMA(9471de242e35d076);
CAPNP_DECLARE_SCHEMA(9eac19dbe2514b45);
CAPNP_DECLARE_SCHEMA(878a3f17fda5d9d7);
CAPNP_DECLARE_SCHEMA(ca15e61ec3afe812);
CAPNP_DECLARE_SCHEMA(faabf822874594ff);
CAPNP_DECLARE_SCHEMA(ed95d119c94caf4d);
CAPNP_DECLARE_SCHEMA(e9ae72614e504088);
CAPNP_DECLARE_SCHEMA(ad71a5724b9c2322);
CAPNP_DECLARE_SCHEMA(ffe4deaabe7e816c);
CAPNP_DECLARE_SCHEMA(cbb9123a59b54670);
CAPNP_DECLARE_SCHEMA(ed0b4cdc394f7dd7);
CAPNP_DECLARE_SCHEMA(ef706402b2a55237);
CAPNP_DECLARE_SCHEMA(db90e6b2cd898c78);
CAPNP_DECLARE_SCHEMA(ac9d8cf219ad38a7);
CAPNP_DECLARE_SCHEMA(a9708ec7247098b8);
CAPNP_DECLARE_SCHEMA(c746f86f0701e884);
CAPNP_DECLARE_SCHEMA(8336785753b7e47e);

}  // namespace schemas
}  // namespace capnp

namespace cp {
namespace game {

struct SerializedActor {
  SerializedActor() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fa709b01781b09f3, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ActorGeneration {
  ActorGeneration() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct WakeupQueueEntry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8e8cba1fb4773ed, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ActorGeneration::WakeupQueueEntry {
  WakeupQueueEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(922e00f12518caf1, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ActorGame {
  ActorGame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9471de242e35d076, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SinglePlayerGame {
  SinglePlayerGame() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9eac19dbe2514b45, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ScriptValue {
  ScriptValue() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    TABLE,
    ARRAY,
    INT_VALUE,
    FLOAT_VALUE,
    BOOL_VALUE,
    STRING_VALUE,
    CLOSURE,
    UNHANDLED,
    INSTANCE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(878a3f17fda5d9d7, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ScriptKeyValue {
  ScriptKeyValue() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca15e61ec3afe812, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugRequest {
  DebugRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    SCRIPT_INFO,
    ADD_BREAKPOINT,
    SCRIPT_GET,
    EXECUTE,
  };
  struct ScriptInfo;
  struct AddBreakpoint;
  struct ScriptGet;
  struct Execute;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(faabf822874594ff, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugRequest::ScriptInfo {
  ScriptInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed95d119c94caf4d, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugRequest::AddBreakpoint {
  AddBreakpoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e9ae72614e504088, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugRequest::ScriptGet {
  ScriptGet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad71a5724b9c2322, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugRequest::Execute {
  Execute() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ffe4deaabe7e816c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugReply {
  DebugReply() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ERROR,
    SCRIPT_INFO,
    ADD_BREAKPOINT,
    SCRIPT_GET,
    EVENT_STOPPED,
    EVENT_WATCHPOINT,
    EXECUTE,
  };
  struct ScriptInfo;
  struct AddBreakpoint;
  struct ScriptGet;
  struct EventStopped;
  struct EventWatchpoint;
  struct Execute;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbb9123a59b54670, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugReply::ScriptInfo {
  ScriptInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed0b4cdc394f7dd7, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugReply::AddBreakpoint {
  AddBreakpoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ef706402b2a55237, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugReply::ScriptGet {
  ScriptGet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db90e6b2cd898c78, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugReply::EventStopped {
  EventStopped() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    BREAKPOINT_ID,
    SIGNAL,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ac9d8cf219ad38a7, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugReply::EventWatchpoint {
  EventWatchpoint() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9708ec7247098b8, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugReply::Execute {
  Execute() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c746f86f0701e884, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DebugEvent {
  DebugEvent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8336785753b7e47e, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class SerializedActor::Reader {
public:
  typedef SerializedActor Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline bool hasUrl() const;
  inline  ::capnp::Text::Reader getUrl() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SerializedActor::Builder {
public:
  typedef SerializedActor Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasUrl();
  inline  ::capnp::Text::Builder getUrl();
  inline void setUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUrl(unsigned int size);
  inline void adoptUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUrl();

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SerializedActor::Pipeline {
public:
  typedef SerializedActor Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActorGeneration::Reader {
public:
  typedef ActorGeneration Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasActors() const;
  inline  ::capnp::List< ::cp::game::SerializedActor>::Reader getActors() const;

  inline bool hasWakeupQueue() const;
  inline  ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>::Reader getWakeupQueue() const;

  inline  ::uint64_t getGenCount() const;

  inline  ::uint64_t getMonotonicTime() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorGeneration::Builder {
public:
  typedef ActorGeneration Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasActors();
  inline  ::capnp::List< ::cp::game::SerializedActor>::Builder getActors();
  inline void setActors( ::capnp::List< ::cp::game::SerializedActor>::Reader value);
  inline  ::capnp::List< ::cp::game::SerializedActor>::Builder initActors(unsigned int size);
  inline void adoptActors(::capnp::Orphan< ::capnp::List< ::cp::game::SerializedActor>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cp::game::SerializedActor>> disownActors();

  inline bool hasWakeupQueue();
  inline  ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>::Builder getWakeupQueue();
  inline void setWakeupQueue( ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>::Reader value);
  inline  ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>::Builder initWakeupQueue(unsigned int size);
  inline void adoptWakeupQueue(::capnp::Orphan< ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>> disownWakeupQueue();

  inline  ::uint64_t getGenCount();
  inline void setGenCount( ::uint64_t value);

  inline  ::uint64_t getMonotonicTime();
  inline void setMonotonicTime( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorGeneration::Pipeline {
public:
  typedef ActorGeneration Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActorGeneration::WakeupQueueEntry::Reader {
public:
  typedef WakeupQueueEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTime() const;

  inline  ::uint64_t getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorGeneration::WakeupQueueEntry::Builder {
public:
  typedef WakeupQueueEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getTime();
  inline void setTime( ::uint64_t value);

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorGeneration::WakeupQueueEntry::Pipeline {
public:
  typedef WakeupQueueEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActorGame::Reader {
public:
  typedef ActorGame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasActorGeneration() const;
  inline  ::cp::game::ActorGeneration::Reader getActorGeneration() const;

  inline bool hasIdBitmap() const;
  inline  ::capnp::Data::Reader getIdBitmap() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorGame::Builder {
public:
  typedef ActorGame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasActorGeneration();
  inline  ::cp::game::ActorGeneration::Builder getActorGeneration();
  inline void setActorGeneration( ::cp::game::ActorGeneration::Reader value);
  inline  ::cp::game::ActorGeneration::Builder initActorGeneration();
  inline void adoptActorGeneration(::capnp::Orphan< ::cp::game::ActorGeneration>&& value);
  inline ::capnp::Orphan< ::cp::game::ActorGeneration> disownActorGeneration();

  inline bool hasIdBitmap();
  inline  ::capnp::Data::Builder getIdBitmap();
  inline void setIdBitmap( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initIdBitmap(unsigned int size);
  inline void adoptIdBitmap(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownIdBitmap();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorGame::Pipeline {
public:
  typedef ActorGame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cp::game::ActorGeneration::Pipeline getActorGeneration();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SinglePlayerGame::Reader {
public:
  typedef SinglePlayerGame Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SinglePlayerGame::Builder {
public:
  typedef SinglePlayerGame Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SinglePlayerGame::Pipeline {
public:
  typedef SinglePlayerGame Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ScriptValue::Reader {
public:
  typedef ScriptValue Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isTable() const;
  inline bool hasTable() const;
  inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Reader getTable() const;

  inline bool isArray() const;
  inline bool hasArray() const;
  inline  ::capnp::List< ::cp::game::ScriptValue>::Reader getArray() const;

  inline bool isIntValue() const;
  inline  ::int64_t getIntValue() const;

  inline bool isFloatValue() const;
  inline double getFloatValue() const;

  inline bool isBoolValue() const;
  inline bool getBoolValue() const;

  inline bool isStringValue() const;
  inline bool hasStringValue() const;
  inline  ::capnp::Text::Reader getStringValue() const;

  inline bool isClosure() const;
  inline bool hasClosure() const;
  inline  ::capnp::Data::Reader getClosure() const;

  inline bool isUnhandled() const;
  inline  ::int32_t getUnhandled() const;

  inline bool isInstance() const;
  inline bool hasInstance() const;
  inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Reader getInstance() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ScriptValue::Builder {
public:
  typedef ScriptValue Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isTable();
  inline bool hasTable();
  inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Builder getTable();
  inline void setTable( ::capnp::List< ::cp::game::ScriptKeyValue>::Reader value);
  inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Builder initTable(unsigned int size);
  inline void adoptTable(::capnp::Orphan< ::capnp::List< ::cp::game::ScriptKeyValue>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptKeyValue>> disownTable();

  inline bool isArray();
  inline bool hasArray();
  inline  ::capnp::List< ::cp::game::ScriptValue>::Builder getArray();
  inline void setArray( ::capnp::List< ::cp::game::ScriptValue>::Reader value);
  inline  ::capnp::List< ::cp::game::ScriptValue>::Builder initArray(unsigned int size);
  inline void adoptArray(::capnp::Orphan< ::capnp::List< ::cp::game::ScriptValue>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptValue>> disownArray();

  inline bool isIntValue();
  inline  ::int64_t getIntValue();
  inline void setIntValue( ::int64_t value);

  inline bool isFloatValue();
  inline double getFloatValue();
  inline void setFloatValue(double value);

  inline bool isBoolValue();
  inline bool getBoolValue();
  inline void setBoolValue(bool value);

  inline bool isStringValue();
  inline bool hasStringValue();
  inline  ::capnp::Text::Builder getStringValue();
  inline void setStringValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStringValue(unsigned int size);
  inline void adoptStringValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStringValue();

  inline bool isClosure();
  inline bool hasClosure();
  inline  ::capnp::Data::Builder getClosure();
  inline void setClosure( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initClosure(unsigned int size);
  inline void adoptClosure(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownClosure();

  inline bool isUnhandled();
  inline  ::int32_t getUnhandled();
  inline void setUnhandled( ::int32_t value);

  inline bool isInstance();
  inline bool hasInstance();
  inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Builder getInstance();
  inline void setInstance( ::capnp::List< ::cp::game::ScriptKeyValue>::Reader value);
  inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Builder initInstance(unsigned int size);
  inline void adoptInstance(::capnp::Orphan< ::capnp::List< ::cp::game::ScriptKeyValue>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptKeyValue>> disownInstance();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ScriptValue::Pipeline {
public:
  typedef ScriptValue Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ScriptKeyValue::Reader {
public:
  typedef ScriptKeyValue Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasKey() const;
  inline  ::capnp::Text::Reader getKey() const;

  inline bool hasValue() const;
  inline  ::cp::game::ScriptValue::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ScriptKeyValue::Builder {
public:
  typedef ScriptKeyValue Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasKey();
  inline  ::capnp::Text::Builder getKey();
  inline void setKey( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownKey();

  inline bool hasValue();
  inline  ::cp::game::ScriptValue::Builder getValue();
  inline void setValue( ::cp::game::ScriptValue::Reader value);
  inline  ::cp::game::ScriptValue::Builder initValue();
  inline void adoptValue(::capnp::Orphan< ::cp::game::ScriptValue>&& value);
  inline ::capnp::Orphan< ::cp::game::ScriptValue> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ScriptKeyValue::Pipeline {
public:
  typedef ScriptKeyValue Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cp::game::ScriptValue::Pipeline getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugRequest::Reader {
public:
  typedef DebugRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::int64_t getToken() const;

  inline bool isScriptInfo() const;
  inline bool hasScriptInfo() const;
  inline  ::cp::game::DebugRequest::ScriptInfo::Reader getScriptInfo() const;

  inline bool isAddBreakpoint() const;
  inline bool hasAddBreakpoint() const;
  inline  ::cp::game::DebugRequest::AddBreakpoint::Reader getAddBreakpoint() const;

  inline bool isScriptGet() const;
  inline bool hasScriptGet() const;
  inline  ::cp::game::DebugRequest::ScriptGet::Reader getScriptGet() const;

  inline bool isExecute() const;
  inline bool hasExecute() const;
  inline  ::cp::game::DebugRequest::Execute::Reader getExecute() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugRequest::Builder {
public:
  typedef DebugRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::int64_t getToken();
  inline void setToken( ::int64_t value);

  inline bool isScriptInfo();
  inline bool hasScriptInfo();
  inline  ::cp::game::DebugRequest::ScriptInfo::Builder getScriptInfo();
  inline void setScriptInfo( ::cp::game::DebugRequest::ScriptInfo::Reader value);
  inline  ::cp::game::DebugRequest::ScriptInfo::Builder initScriptInfo();
  inline void adoptScriptInfo(::capnp::Orphan< ::cp::game::DebugRequest::ScriptInfo>&& value);
  inline ::capnp::Orphan< ::cp::game::DebugRequest::ScriptInfo> disownScriptInfo();

  inline bool isAddBreakpoint();
  inline bool hasAddBreakpoint();
  inline  ::cp::game::DebugRequest::AddBreakpoint::Builder getAddBreakpoint();
  inline void setAddBreakpoint( ::cp::game::DebugRequest::AddBreakpoint::Reader value);
  inline  ::cp::game::DebugRequest::AddBreakpoint::Builder initAddBreakpoint();
  inline void adoptAddBreakpoint(::capnp::Orphan< ::cp::game::DebugRequest::AddBreakpoint>&& value);
  inline ::capnp::Orphan< ::cp::game::DebugRequest::AddBreakpoint> disownAddBreakpoint();

  inline bool isScriptGet();
  inline bool hasScriptGet();
  inline  ::cp::game::DebugRequest::ScriptGet::Builder getScriptGet();
  inline void setScriptGet( ::cp::game::DebugRequest::ScriptGet::Reader value);
  inline  ::cp::game::DebugRequest::ScriptGet::Builder initScriptGet();
  inline void adoptScriptGet(::capnp::Orphan< ::cp::game::DebugRequest::ScriptGet>&& value);
  inline ::capnp::Orphan< ::cp::game::DebugRequest::ScriptGet> disownScriptGet();

  inline bool isExecute();
  inline bool hasExecute();
  inline  ::cp::game::DebugRequest::Execute::Builder getExecute();
  inline void setExecute( ::cp::game::DebugRequest::Execute::Reader value);
  inline  ::cp::game::DebugRequest::Execute::Builder initExecute();
  inline void adoptExecute(::capnp::Orphan< ::cp::game::DebugRequest::Execute>&& value);
  inline ::capnp::Orphan< ::cp::game::DebugRequest::Execute> disownExecute();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugRequest::Pipeline {
public:
  typedef DebugRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugRequest::ScriptInfo::Reader {
public:
  typedef ScriptInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugRequest::ScriptInfo::Builder {
public:
  typedef ScriptInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugRequest::ScriptInfo::Pipeline {
public:
  typedef ScriptInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugRequest::AddBreakpoint::Reader {
public:
  typedef AddBreakpoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

  inline  ::int32_t getLine() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugRequest::AddBreakpoint::Builder {
public:
  typedef AddBreakpoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline  ::int32_t getLine();
  inline void setLine( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugRequest::AddBreakpoint::Pipeline {
public:
  typedef AddBreakpoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugRequest::ScriptGet::Reader {
public:
  typedef ScriptGet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugRequest::ScriptGet::Builder {
public:
  typedef ScriptGet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugRequest::ScriptGet::Pipeline {
public:
  typedef ScriptGet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugRequest::Execute::Reader {
public:
  typedef Execute Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasScript() const;
  inline  ::capnp::Text::Reader getScript() const;

  inline bool getImmediate() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugRequest::Execute::Builder {
public:
  typedef Execute Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasScript();
  inline  ::capnp::Text::Builder getScript();
  inline void setScript( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initScript(unsigned int size);
  inline void adoptScript(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownScript();

  inline bool getImmediate();
  inline void setImmediate(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugRequest::Execute::Pipeline {
public:
  typedef Execute Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugReply::Reader {
public:
  typedef DebugReply Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::int64_t getToken() const;

  inline bool isError() const;
  inline bool hasError() const;
  inline  ::capnp::Text::Reader getError() const;

  inline bool isScriptInfo() const;
  inline bool hasScriptInfo() const;
  inline  ::capnp::List< ::cp::game::DebugReply::ScriptInfo>::Reader getScriptInfo() const;

  inline bool isAddBreakpoint() const;
  inline bool hasAddBreakpoint() const;
  inline  ::cp::game::DebugReply::AddBreakpoint::Reader getAddBreakpoint() const;

  inline bool isScriptGet() const;
  inline bool hasScriptGet() const;
  inline  ::cp::game::DebugReply::ScriptGet::Reader getScriptGet() const;

  inline bool isEventStopped() const;
  inline bool hasEventStopped() const;
  inline  ::cp::game::DebugReply::EventStopped::Reader getEventStopped() const;

  inline bool isEventWatchpoint() const;
  inline bool hasEventWatchpoint() const;
  inline  ::cp::game::DebugReply::EventWatchpoint::Reader getEventWatchpoint() const;

  inline bool isExecute() const;
  inline bool hasExecute() const;
  inline  ::cp::game::DebugReply::Execute::Reader getExecute() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugReply::Builder {
public:
  typedef DebugReply Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::int64_t getToken();
  inline void setToken( ::int64_t value);

  inline bool isError();
  inline bool hasError();
  inline  ::capnp::Text::Builder getError();
  inline void setError( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initError(unsigned int size);
  inline void adoptError(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownError();

  inline bool isScriptInfo();
  inline bool hasScriptInfo();
  inline  ::capnp::List< ::cp::game::DebugReply::ScriptInfo>::Builder getScriptInfo();
  inline void setScriptInfo( ::capnp::List< ::cp::game::DebugReply::ScriptInfo>::Reader value);
  inline  ::capnp::List< ::cp::game::DebugReply::ScriptInfo>::Builder initScriptInfo(unsigned int size);
  inline void adoptScriptInfo(::capnp::Orphan< ::capnp::List< ::cp::game::DebugReply::ScriptInfo>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cp::game::DebugReply::ScriptInfo>> disownScriptInfo();

  inline bool isAddBreakpoint();
  inline bool hasAddBreakpoint();
  inline  ::cp::game::DebugReply::AddBreakpoint::Builder getAddBreakpoint();
  inline void setAddBreakpoint( ::cp::game::DebugReply::AddBreakpoint::Reader value);
  inline  ::cp::game::DebugReply::AddBreakpoint::Builder initAddBreakpoint();
  inline void adoptAddBreakpoint(::capnp::Orphan< ::cp::game::DebugReply::AddBreakpoint>&& value);
  inline ::capnp::Orphan< ::cp::game::DebugReply::AddBreakpoint> disownAddBreakpoint();

  inline bool isScriptGet();
  inline bool hasScriptGet();
  inline  ::cp::game::DebugReply::ScriptGet::Builder getScriptGet();
  inline void setScriptGet( ::cp::game::DebugReply::ScriptGet::Reader value);
  inline  ::cp::game::DebugReply::ScriptGet::Builder initScriptGet();
  inline void adoptScriptGet(::capnp::Orphan< ::cp::game::DebugReply::ScriptGet>&& value);
  inline ::capnp::Orphan< ::cp::game::DebugReply::ScriptGet> disownScriptGet();

  inline bool isEventStopped();
  inline bool hasEventStopped();
  inline  ::cp::game::DebugReply::EventStopped::Builder getEventStopped();
  inline void setEventStopped( ::cp::game::DebugReply::EventStopped::Reader value);
  inline  ::cp::game::DebugReply::EventStopped::Builder initEventStopped();
  inline void adoptEventStopped(::capnp::Orphan< ::cp::game::DebugReply::EventStopped>&& value);
  inline ::capnp::Orphan< ::cp::game::DebugReply::EventStopped> disownEventStopped();

  inline bool isEventWatchpoint();
  inline bool hasEventWatchpoint();
  inline  ::cp::game::DebugReply::EventWatchpoint::Builder getEventWatchpoint();
  inline void setEventWatchpoint( ::cp::game::DebugReply::EventWatchpoint::Reader value);
  inline  ::cp::game::DebugReply::EventWatchpoint::Builder initEventWatchpoint();
  inline void adoptEventWatchpoint(::capnp::Orphan< ::cp::game::DebugReply::EventWatchpoint>&& value);
  inline ::capnp::Orphan< ::cp::game::DebugReply::EventWatchpoint> disownEventWatchpoint();

  inline bool isExecute();
  inline bool hasExecute();
  inline  ::cp::game::DebugReply::Execute::Builder getExecute();
  inline void setExecute( ::cp::game::DebugReply::Execute::Reader value);
  inline  ::cp::game::DebugReply::Execute::Builder initExecute();
  inline void adoptExecute(::capnp::Orphan< ::cp::game::DebugReply::Execute>&& value);
  inline ::capnp::Orphan< ::cp::game::DebugReply::Execute> disownExecute();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugReply::Pipeline {
public:
  typedef DebugReply Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugReply::ScriptInfo::Reader {
public:
  typedef ScriptInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

  inline bool hasSourceName() const;
  inline  ::capnp::Text::Reader getSourceName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugReply::ScriptInfo::Builder {
public:
  typedef ScriptInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasSourceName();
  inline  ::capnp::Text::Builder getSourceName();
  inline void setSourceName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSourceName(unsigned int size);
  inline void adoptSourceName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSourceName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugReply::ScriptInfo::Pipeline {
public:
  typedef ScriptInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugReply::AddBreakpoint::Reader {
public:
  typedef AddBreakpoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getBreakpointId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugReply::AddBreakpoint::Builder {
public:
  typedef AddBreakpoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getBreakpointId();
  inline void setBreakpointId( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugReply::AddBreakpoint::Pipeline {
public:
  typedef AddBreakpoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugReply::ScriptGet::Reader {
public:
  typedef ScriptGet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSourceLines() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getSourceLines() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugReply::ScriptGet::Builder {
public:
  typedef ScriptGet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSourceLines();
  inline  ::capnp::List< ::capnp::Text>::Builder getSourceLines();
  inline void setSourceLines( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setSourceLines(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initSourceLines(unsigned int size);
  inline void adoptSourceLines(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownSourceLines();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugReply::ScriptGet::Pipeline {
public:
  typedef ScriptGet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugReply::EventStopped::Reader {
public:
  typedef EventStopped Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isBreakpointId() const;
  inline  ::int32_t getBreakpointId() const;

  inline bool isSignal() const;
  inline  ::int32_t getSignal() const;

  inline  ::int32_t getScriptId() const;

  inline  ::int32_t getLine() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugReply::EventStopped::Builder {
public:
  typedef EventStopped Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isBreakpointId();
  inline  ::int32_t getBreakpointId();
  inline void setBreakpointId( ::int32_t value);

  inline bool isSignal();
  inline  ::int32_t getSignal();
  inline void setSignal( ::int32_t value);

  inline  ::int32_t getScriptId();
  inline void setScriptId( ::int32_t value);

  inline  ::int32_t getLine();
  inline void setLine( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugReply::EventStopped::Pipeline {
public:
  typedef EventStopped Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugReply::EventWatchpoint::Reader {
public:
  typedef EventWatchpoint Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getWatchpointId() const;

  inline  ::int32_t getScriptId() const;

  inline  ::int32_t getLine() const;

  inline bool hasLocalNames() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getLocalNames() const;

  inline bool hasLocalValues() const;
  inline  ::capnp::List< ::cp::game::ScriptValue>::Reader getLocalValues() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugReply::EventWatchpoint::Builder {
public:
  typedef EventWatchpoint Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getWatchpointId();
  inline void setWatchpointId( ::int32_t value);

  inline  ::int32_t getScriptId();
  inline void setScriptId( ::int32_t value);

  inline  ::int32_t getLine();
  inline void setLine( ::int32_t value);

  inline bool hasLocalNames();
  inline  ::capnp::List< ::capnp::Text>::Builder getLocalNames();
  inline void setLocalNames( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setLocalNames(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initLocalNames(unsigned int size);
  inline void adoptLocalNames(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownLocalNames();

  inline bool hasLocalValues();
  inline  ::capnp::List< ::cp::game::ScriptValue>::Builder getLocalValues();
  inline void setLocalValues( ::capnp::List< ::cp::game::ScriptValue>::Reader value);
  inline  ::capnp::List< ::cp::game::ScriptValue>::Builder initLocalValues(unsigned int size);
  inline void adoptLocalValues(::capnp::Orphan< ::capnp::List< ::cp::game::ScriptValue>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptValue>> disownLocalValues();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugReply::EventWatchpoint::Pipeline {
public:
  typedef EventWatchpoint Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugReply::Execute::Reader {
public:
  typedef Execute Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasConsoleOutput() const;
  inline  ::capnp::Text::Reader getConsoleOutput() const;

  inline bool getError() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugReply::Execute::Builder {
public:
  typedef Execute Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasConsoleOutput();
  inline  ::capnp::Text::Builder getConsoleOutput();
  inline void setConsoleOutput( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initConsoleOutput(unsigned int size);
  inline void adoptConsoleOutput(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownConsoleOutput();

  inline bool getError();
  inline void setError(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugReply::Execute::Pipeline {
public:
  typedef Execute Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DebugEvent::Reader {
public:
  typedef DebugEvent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DebugEvent::Builder {
public:
  typedef DebugEvent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DebugEvent::Pipeline {
public:
  typedef DebugEvent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint64_t SerializedActor::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t SerializedActor::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SerializedActor::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SerializedActor::Reader::hasUrl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SerializedActor::Builder::hasUrl() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SerializedActor::Reader::getUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SerializedActor::Builder::getUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SerializedActor::Builder::setUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SerializedActor::Builder::initUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SerializedActor::Builder::adoptUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SerializedActor::Builder::disownUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SerializedActor::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SerializedActor::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader SerializedActor::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder SerializedActor::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SerializedActor::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder SerializedActor::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SerializedActor::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> SerializedActor::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ActorGeneration::Reader::hasActors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ActorGeneration::Builder::hasActors() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cp::game::SerializedActor>::Reader ActorGeneration::Reader::getActors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::SerializedActor>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cp::game::SerializedActor>::Builder ActorGeneration::Builder::getActors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::SerializedActor>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ActorGeneration::Builder::setActors( ::capnp::List< ::cp::game::SerializedActor>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::SerializedActor>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cp::game::SerializedActor>::Builder ActorGeneration::Builder::initActors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::SerializedActor>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ActorGeneration::Builder::adoptActors(
    ::capnp::Orphan< ::capnp::List< ::cp::game::SerializedActor>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::SerializedActor>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cp::game::SerializedActor>> ActorGeneration::Builder::disownActors() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::SerializedActor>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ActorGeneration::Reader::hasWakeupQueue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ActorGeneration::Builder::hasWakeupQueue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>::Reader ActorGeneration::Reader::getWakeupQueue() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>::Builder ActorGeneration::Builder::getWakeupQueue() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ActorGeneration::Builder::setWakeupQueue( ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>::Builder ActorGeneration::Builder::initWakeupQueue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ActorGeneration::Builder::adoptWakeupQueue(
    ::capnp::Orphan< ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>> ActorGeneration::Builder::disownWakeupQueue() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ActorGeneration::WakeupQueueEntry>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t ActorGeneration::Reader::getGenCount() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ActorGeneration::Builder::getGenCount() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ActorGeneration::Builder::setGenCount( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ActorGeneration::Reader::getMonotonicTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ActorGeneration::Builder::getMonotonicTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ActorGeneration::Builder::setMonotonicTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ActorGeneration::WakeupQueueEntry::Reader::getTime() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ActorGeneration::WakeupQueueEntry::Builder::getTime() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ActorGeneration::WakeupQueueEntry::Builder::setTime( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ActorGeneration::WakeupQueueEntry::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ActorGeneration::WakeupQueueEntry::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ActorGeneration::WakeupQueueEntry::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ActorGame::Reader::hasActorGeneration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ActorGame::Builder::hasActorGeneration() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cp::game::ActorGeneration::Reader ActorGame::Reader::getActorGeneration() const {
  return ::capnp::_::PointerHelpers< ::cp::game::ActorGeneration>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cp::game::ActorGeneration::Builder ActorGame::Builder::getActorGeneration() {
  return ::capnp::_::PointerHelpers< ::cp::game::ActorGeneration>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cp::game::ActorGeneration::Pipeline ActorGame::Pipeline::getActorGeneration() {
  return  ::cp::game::ActorGeneration::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ActorGame::Builder::setActorGeneration( ::cp::game::ActorGeneration::Reader value) {
  ::capnp::_::PointerHelpers< ::cp::game::ActorGeneration>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cp::game::ActorGeneration::Builder ActorGame::Builder::initActorGeneration() {
  return ::capnp::_::PointerHelpers< ::cp::game::ActorGeneration>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ActorGame::Builder::adoptActorGeneration(
    ::capnp::Orphan< ::cp::game::ActorGeneration>&& value) {
  ::capnp::_::PointerHelpers< ::cp::game::ActorGeneration>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cp::game::ActorGeneration> ActorGame::Builder::disownActorGeneration() {
  return ::capnp::_::PointerHelpers< ::cp::game::ActorGeneration>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ActorGame::Reader::hasIdBitmap() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ActorGame::Builder::hasIdBitmap() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ActorGame::Reader::getIdBitmap() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ActorGame::Builder::getIdBitmap() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ActorGame::Builder::setIdBitmap( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ActorGame::Builder::initIdBitmap(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ActorGame::Builder::adoptIdBitmap(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ActorGame::Builder::disownIdBitmap() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::cp::game::ScriptValue::Which ScriptValue::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::cp::game::ScriptValue::Which ScriptValue::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ScriptValue::Reader::isTable() const {
  return which() == ScriptValue::TABLE;
}
inline bool ScriptValue::Builder::isTable() {
  return which() == ScriptValue::TABLE;
}
inline bool ScriptValue::Reader::hasTable() const {
  if (which() != ScriptValue::TABLE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScriptValue::Builder::hasTable() {
  if (which() != ScriptValue::TABLE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Reader ScriptValue::Reader::getTable() const {
  KJ_IREQUIRE((which() == ScriptValue::TABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Builder ScriptValue::Builder::getTable() {
  KJ_IREQUIRE((which() == ScriptValue::TABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScriptValue::Builder::setTable( ::capnp::List< ::cp::game::ScriptKeyValue>::Reader value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::TABLE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Builder ScriptValue::Builder::initTable(unsigned int size) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::TABLE);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ScriptValue::Builder::adoptTable(
    ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptKeyValue>>&& value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::TABLE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptKeyValue>> ScriptValue::Builder::disownTable() {
  KJ_IREQUIRE((which() == ScriptValue::TABLE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ScriptValue::Reader::isArray() const {
  return which() == ScriptValue::ARRAY;
}
inline bool ScriptValue::Builder::isArray() {
  return which() == ScriptValue::ARRAY;
}
inline bool ScriptValue::Reader::hasArray() const {
  if (which() != ScriptValue::ARRAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScriptValue::Builder::hasArray() {
  if (which() != ScriptValue::ARRAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cp::game::ScriptValue>::Reader ScriptValue::Reader::getArray() const {
  KJ_IREQUIRE((which() == ScriptValue::ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cp::game::ScriptValue>::Builder ScriptValue::Builder::getArray() {
  KJ_IREQUIRE((which() == ScriptValue::ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScriptValue::Builder::setArray( ::capnp::List< ::cp::game::ScriptValue>::Reader value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cp::game::ScriptValue>::Builder ScriptValue::Builder::initArray(unsigned int size) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::ARRAY);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ScriptValue::Builder::adoptArray(
    ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptValue>>&& value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptValue>> ScriptValue::Builder::disownArray() {
  KJ_IREQUIRE((which() == ScriptValue::ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ScriptValue::Reader::isIntValue() const {
  return which() == ScriptValue::INT_VALUE;
}
inline bool ScriptValue::Builder::isIntValue() {
  return which() == ScriptValue::INT_VALUE;
}
inline  ::int64_t ScriptValue::Reader::getIntValue() const {
  KJ_IREQUIRE((which() == ScriptValue::INT_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t ScriptValue::Builder::getIntValue() {
  KJ_IREQUIRE((which() == ScriptValue::INT_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ScriptValue::Builder::setIntValue( ::int64_t value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::INT_VALUE);
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ScriptValue::Reader::isFloatValue() const {
  return which() == ScriptValue::FLOAT_VALUE;
}
inline bool ScriptValue::Builder::isFloatValue() {
  return which() == ScriptValue::FLOAT_VALUE;
}
inline double ScriptValue::Reader::getFloatValue() const {
  KJ_IREQUIRE((which() == ScriptValue::FLOAT_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double ScriptValue::Builder::getFloatValue() {
  KJ_IREQUIRE((which() == ScriptValue::FLOAT_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ScriptValue::Builder::setFloatValue(double value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::FLOAT_VALUE);
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ScriptValue::Reader::isBoolValue() const {
  return which() == ScriptValue::BOOL_VALUE;
}
inline bool ScriptValue::Builder::isBoolValue() {
  return which() == ScriptValue::BOOL_VALUE;
}
inline bool ScriptValue::Reader::getBoolValue() const {
  KJ_IREQUIRE((which() == ScriptValue::BOOL_VALUE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool ScriptValue::Builder::getBoolValue() {
  KJ_IREQUIRE((which() == ScriptValue::BOOL_VALUE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void ScriptValue::Builder::setBoolValue(bool value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::BOOL_VALUE);
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool ScriptValue::Reader::isStringValue() const {
  return which() == ScriptValue::STRING_VALUE;
}
inline bool ScriptValue::Builder::isStringValue() {
  return which() == ScriptValue::STRING_VALUE;
}
inline bool ScriptValue::Reader::hasStringValue() const {
  if (which() != ScriptValue::STRING_VALUE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScriptValue::Builder::hasStringValue() {
  if (which() != ScriptValue::STRING_VALUE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ScriptValue::Reader::getStringValue() const {
  KJ_IREQUIRE((which() == ScriptValue::STRING_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ScriptValue::Builder::getStringValue() {
  KJ_IREQUIRE((which() == ScriptValue::STRING_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScriptValue::Builder::setStringValue( ::capnp::Text::Reader value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::STRING_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ScriptValue::Builder::initStringValue(unsigned int size) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::STRING_VALUE);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ScriptValue::Builder::adoptStringValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::STRING_VALUE);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ScriptValue::Builder::disownStringValue() {
  KJ_IREQUIRE((which() == ScriptValue::STRING_VALUE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ScriptValue::Reader::isClosure() const {
  return which() == ScriptValue::CLOSURE;
}
inline bool ScriptValue::Builder::isClosure() {
  return which() == ScriptValue::CLOSURE;
}
inline bool ScriptValue::Reader::hasClosure() const {
  if (which() != ScriptValue::CLOSURE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScriptValue::Builder::hasClosure() {
  if (which() != ScriptValue::CLOSURE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader ScriptValue::Reader::getClosure() const {
  KJ_IREQUIRE((which() == ScriptValue::CLOSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder ScriptValue::Builder::getClosure() {
  KJ_IREQUIRE((which() == ScriptValue::CLOSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScriptValue::Builder::setClosure( ::capnp::Data::Reader value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::CLOSURE);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder ScriptValue::Builder::initClosure(unsigned int size) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::CLOSURE);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ScriptValue::Builder::adoptClosure(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::CLOSURE);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> ScriptValue::Builder::disownClosure() {
  KJ_IREQUIRE((which() == ScriptValue::CLOSURE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ScriptValue::Reader::isUnhandled() const {
  return which() == ScriptValue::UNHANDLED;
}
inline bool ScriptValue::Builder::isUnhandled() {
  return which() == ScriptValue::UNHANDLED;
}
inline  ::int32_t ScriptValue::Reader::getUnhandled() const {
  KJ_IREQUIRE((which() == ScriptValue::UNHANDLED),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t ScriptValue::Builder::getUnhandled() {
  KJ_IREQUIRE((which() == ScriptValue::UNHANDLED),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ScriptValue::Builder::setUnhandled( ::int32_t value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::UNHANDLED);
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool ScriptValue::Reader::isInstance() const {
  return which() == ScriptValue::INSTANCE;
}
inline bool ScriptValue::Builder::isInstance() {
  return which() == ScriptValue::INSTANCE;
}
inline bool ScriptValue::Reader::hasInstance() const {
  if (which() != ScriptValue::INSTANCE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScriptValue::Builder::hasInstance() {
  if (which() != ScriptValue::INSTANCE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Reader ScriptValue::Reader::getInstance() const {
  KJ_IREQUIRE((which() == ScriptValue::INSTANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Builder ScriptValue::Builder::getInstance() {
  KJ_IREQUIRE((which() == ScriptValue::INSTANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScriptValue::Builder::setInstance( ::capnp::List< ::cp::game::ScriptKeyValue>::Reader value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::INSTANCE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cp::game::ScriptKeyValue>::Builder ScriptValue::Builder::initInstance(unsigned int size) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::INSTANCE);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ScriptValue::Builder::adoptInstance(
    ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptKeyValue>>&& value) {
  _builder.setDataField<ScriptValue::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ScriptValue::INSTANCE);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptKeyValue>> ScriptValue::Builder::disownInstance() {
  KJ_IREQUIRE((which() == ScriptValue::INSTANCE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptKeyValue>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ScriptKeyValue::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScriptKeyValue::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ScriptKeyValue::Reader::getKey() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ScriptKeyValue::Builder::getKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScriptKeyValue::Builder::setKey( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ScriptKeyValue::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ScriptKeyValue::Builder::adoptKey(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ScriptKeyValue::Builder::disownKey() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ScriptKeyValue::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ScriptKeyValue::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::cp::game::ScriptValue::Reader ScriptKeyValue::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::cp::game::ScriptValue>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::cp::game::ScriptValue::Builder ScriptKeyValue::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::cp::game::ScriptValue>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cp::game::ScriptValue::Pipeline ScriptKeyValue::Pipeline::getValue() {
  return  ::cp::game::ScriptValue::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ScriptKeyValue::Builder::setValue( ::cp::game::ScriptValue::Reader value) {
  ::capnp::_::PointerHelpers< ::cp::game::ScriptValue>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::cp::game::ScriptValue::Builder ScriptKeyValue::Builder::initValue() {
  return ::capnp::_::PointerHelpers< ::cp::game::ScriptValue>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ScriptKeyValue::Builder::adoptValue(
    ::capnp::Orphan< ::cp::game::ScriptValue>&& value) {
  ::capnp::_::PointerHelpers< ::cp::game::ScriptValue>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cp::game::ScriptValue> ScriptKeyValue::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::cp::game::ScriptValue>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::cp::game::DebugRequest::Which DebugRequest::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::cp::game::DebugRequest::Which DebugRequest::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t DebugRequest::Reader::getToken() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t DebugRequest::Builder::getToken() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DebugRequest::Builder::setToken( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DebugRequest::Reader::isScriptInfo() const {
  return which() == DebugRequest::SCRIPT_INFO;
}
inline bool DebugRequest::Builder::isScriptInfo() {
  return which() == DebugRequest::SCRIPT_INFO;
}
inline bool DebugRequest::Reader::hasScriptInfo() const {
  if (which() != DebugRequest::SCRIPT_INFO) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugRequest::Builder::hasScriptInfo() {
  if (which() != DebugRequest::SCRIPT_INFO) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cp::game::DebugRequest::ScriptInfo::Reader DebugRequest::Reader::getScriptInfo() const {
  KJ_IREQUIRE((which() == DebugRequest::SCRIPT_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptInfo>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cp::game::DebugRequest::ScriptInfo::Builder DebugRequest::Builder::getScriptInfo() {
  KJ_IREQUIRE((which() == DebugRequest::SCRIPT_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptInfo>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugRequest::Builder::setScriptInfo( ::cp::game::DebugRequest::ScriptInfo::Reader value) {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::SCRIPT_INFO);
  ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptInfo>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cp::game::DebugRequest::ScriptInfo::Builder DebugRequest::Builder::initScriptInfo() {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::SCRIPT_INFO);
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptInfo>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugRequest::Builder::adoptScriptInfo(
    ::capnp::Orphan< ::cp::game::DebugRequest::ScriptInfo>&& value) {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::SCRIPT_INFO);
  ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptInfo>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cp::game::DebugRequest::ScriptInfo> DebugRequest::Builder::disownScriptInfo() {
  KJ_IREQUIRE((which() == DebugRequest::SCRIPT_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptInfo>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugRequest::Reader::isAddBreakpoint() const {
  return which() == DebugRequest::ADD_BREAKPOINT;
}
inline bool DebugRequest::Builder::isAddBreakpoint() {
  return which() == DebugRequest::ADD_BREAKPOINT;
}
inline bool DebugRequest::Reader::hasAddBreakpoint() const {
  if (which() != DebugRequest::ADD_BREAKPOINT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugRequest::Builder::hasAddBreakpoint() {
  if (which() != DebugRequest::ADD_BREAKPOINT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cp::game::DebugRequest::AddBreakpoint::Reader DebugRequest::Reader::getAddBreakpoint() const {
  KJ_IREQUIRE((which() == DebugRequest::ADD_BREAKPOINT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::AddBreakpoint>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cp::game::DebugRequest::AddBreakpoint::Builder DebugRequest::Builder::getAddBreakpoint() {
  KJ_IREQUIRE((which() == DebugRequest::ADD_BREAKPOINT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::AddBreakpoint>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugRequest::Builder::setAddBreakpoint( ::cp::game::DebugRequest::AddBreakpoint::Reader value) {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::ADD_BREAKPOINT);
  ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::AddBreakpoint>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cp::game::DebugRequest::AddBreakpoint::Builder DebugRequest::Builder::initAddBreakpoint() {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::ADD_BREAKPOINT);
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::AddBreakpoint>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugRequest::Builder::adoptAddBreakpoint(
    ::capnp::Orphan< ::cp::game::DebugRequest::AddBreakpoint>&& value) {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::ADD_BREAKPOINT);
  ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::AddBreakpoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cp::game::DebugRequest::AddBreakpoint> DebugRequest::Builder::disownAddBreakpoint() {
  KJ_IREQUIRE((which() == DebugRequest::ADD_BREAKPOINT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::AddBreakpoint>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugRequest::Reader::isScriptGet() const {
  return which() == DebugRequest::SCRIPT_GET;
}
inline bool DebugRequest::Builder::isScriptGet() {
  return which() == DebugRequest::SCRIPT_GET;
}
inline bool DebugRequest::Reader::hasScriptGet() const {
  if (which() != DebugRequest::SCRIPT_GET) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugRequest::Builder::hasScriptGet() {
  if (which() != DebugRequest::SCRIPT_GET) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cp::game::DebugRequest::ScriptGet::Reader DebugRequest::Reader::getScriptGet() const {
  KJ_IREQUIRE((which() == DebugRequest::SCRIPT_GET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptGet>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cp::game::DebugRequest::ScriptGet::Builder DebugRequest::Builder::getScriptGet() {
  KJ_IREQUIRE((which() == DebugRequest::SCRIPT_GET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptGet>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugRequest::Builder::setScriptGet( ::cp::game::DebugRequest::ScriptGet::Reader value) {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::SCRIPT_GET);
  ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptGet>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cp::game::DebugRequest::ScriptGet::Builder DebugRequest::Builder::initScriptGet() {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::SCRIPT_GET);
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptGet>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugRequest::Builder::adoptScriptGet(
    ::capnp::Orphan< ::cp::game::DebugRequest::ScriptGet>&& value) {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::SCRIPT_GET);
  ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptGet>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cp::game::DebugRequest::ScriptGet> DebugRequest::Builder::disownScriptGet() {
  KJ_IREQUIRE((which() == DebugRequest::SCRIPT_GET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::ScriptGet>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugRequest::Reader::isExecute() const {
  return which() == DebugRequest::EXECUTE;
}
inline bool DebugRequest::Builder::isExecute() {
  return which() == DebugRequest::EXECUTE;
}
inline bool DebugRequest::Reader::hasExecute() const {
  if (which() != DebugRequest::EXECUTE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugRequest::Builder::hasExecute() {
  if (which() != DebugRequest::EXECUTE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cp::game::DebugRequest::Execute::Reader DebugRequest::Reader::getExecute() const {
  KJ_IREQUIRE((which() == DebugRequest::EXECUTE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::Execute>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cp::game::DebugRequest::Execute::Builder DebugRequest::Builder::getExecute() {
  KJ_IREQUIRE((which() == DebugRequest::EXECUTE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::Execute>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugRequest::Builder::setExecute( ::cp::game::DebugRequest::Execute::Reader value) {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::EXECUTE);
  ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::Execute>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cp::game::DebugRequest::Execute::Builder DebugRequest::Builder::initExecute() {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::EXECUTE);
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::Execute>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugRequest::Builder::adoptExecute(
    ::capnp::Orphan< ::cp::game::DebugRequest::Execute>&& value) {
  _builder.setDataField<DebugRequest::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugRequest::EXECUTE);
  ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::Execute>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cp::game::DebugRequest::Execute> DebugRequest::Builder::disownExecute() {
  KJ_IREQUIRE((which() == DebugRequest::EXECUTE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugRequest::Execute>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t DebugRequest::AddBreakpoint::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugRequest::AddBreakpoint::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DebugRequest::AddBreakpoint::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DebugRequest::AddBreakpoint::Reader::getLine() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugRequest::AddBreakpoint::Builder::getLine() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DebugRequest::AddBreakpoint::Builder::setLine( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DebugRequest::ScriptGet::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugRequest::ScriptGet::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DebugRequest::ScriptGet::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DebugRequest::Execute::Reader::hasScript() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugRequest::Execute::Builder::hasScript() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DebugRequest::Execute::Reader::getScript() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DebugRequest::Execute::Builder::getScript() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugRequest::Execute::Builder::setScript( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DebugRequest::Execute::Builder::initScript(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DebugRequest::Execute::Builder::adoptScript(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DebugRequest::Execute::Builder::disownScript() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugRequest::Execute::Reader::getImmediate() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DebugRequest::Execute::Builder::getImmediate() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DebugRequest::Execute::Builder::setImmediate(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::cp::game::DebugReply::Which DebugReply::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::cp::game::DebugReply::Which DebugReply::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int64_t DebugReply::Reader::getToken() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t DebugReply::Builder::getToken() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DebugReply::Builder::setToken( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DebugReply::Reader::isError() const {
  return which() == DebugReply::ERROR;
}
inline bool DebugReply::Builder::isError() {
  return which() == DebugReply::ERROR;
}
inline bool DebugReply::Reader::hasError() const {
  if (which() != DebugReply::ERROR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::Builder::hasError() {
  if (which() != DebugReply::ERROR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DebugReply::Reader::getError() const {
  KJ_IREQUIRE((which() == DebugReply::ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DebugReply::Builder::getError() {
  KJ_IREQUIRE((which() == DebugReply::ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::setError( ::capnp::Text::Reader value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::ERROR);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DebugReply::Builder::initError(unsigned int size) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::ERROR);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DebugReply::Builder::adoptError(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::ERROR);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DebugReply::Builder::disownError() {
  KJ_IREQUIRE((which() == DebugReply::ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugReply::Reader::isScriptInfo() const {
  return which() == DebugReply::SCRIPT_INFO;
}
inline bool DebugReply::Builder::isScriptInfo() {
  return which() == DebugReply::SCRIPT_INFO;
}
inline bool DebugReply::Reader::hasScriptInfo() const {
  if (which() != DebugReply::SCRIPT_INFO) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::Builder::hasScriptInfo() {
  if (which() != DebugReply::SCRIPT_INFO) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cp::game::DebugReply::ScriptInfo>::Reader DebugReply::Reader::getScriptInfo() const {
  KJ_IREQUIRE((which() == DebugReply::SCRIPT_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::DebugReply::ScriptInfo>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cp::game::DebugReply::ScriptInfo>::Builder DebugReply::Builder::getScriptInfo() {
  KJ_IREQUIRE((which() == DebugReply::SCRIPT_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::DebugReply::ScriptInfo>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::setScriptInfo( ::capnp::List< ::cp::game::DebugReply::ScriptInfo>::Reader value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::SCRIPT_INFO);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::DebugReply::ScriptInfo>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cp::game::DebugReply::ScriptInfo>::Builder DebugReply::Builder::initScriptInfo(unsigned int size) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::SCRIPT_INFO);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::DebugReply::ScriptInfo>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DebugReply::Builder::adoptScriptInfo(
    ::capnp::Orphan< ::capnp::List< ::cp::game::DebugReply::ScriptInfo>>&& value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::SCRIPT_INFO);
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::DebugReply::ScriptInfo>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cp::game::DebugReply::ScriptInfo>> DebugReply::Builder::disownScriptInfo() {
  KJ_IREQUIRE((which() == DebugReply::SCRIPT_INFO),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::DebugReply::ScriptInfo>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugReply::Reader::isAddBreakpoint() const {
  return which() == DebugReply::ADD_BREAKPOINT;
}
inline bool DebugReply::Builder::isAddBreakpoint() {
  return which() == DebugReply::ADD_BREAKPOINT;
}
inline bool DebugReply::Reader::hasAddBreakpoint() const {
  if (which() != DebugReply::ADD_BREAKPOINT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::Builder::hasAddBreakpoint() {
  if (which() != DebugReply::ADD_BREAKPOINT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cp::game::DebugReply::AddBreakpoint::Reader DebugReply::Reader::getAddBreakpoint() const {
  KJ_IREQUIRE((which() == DebugReply::ADD_BREAKPOINT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::AddBreakpoint>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cp::game::DebugReply::AddBreakpoint::Builder DebugReply::Builder::getAddBreakpoint() {
  KJ_IREQUIRE((which() == DebugReply::ADD_BREAKPOINT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::AddBreakpoint>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::setAddBreakpoint( ::cp::game::DebugReply::AddBreakpoint::Reader value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::ADD_BREAKPOINT);
  ::capnp::_::PointerHelpers< ::cp::game::DebugReply::AddBreakpoint>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cp::game::DebugReply::AddBreakpoint::Builder DebugReply::Builder::initAddBreakpoint() {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::ADD_BREAKPOINT);
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::AddBreakpoint>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::adoptAddBreakpoint(
    ::capnp::Orphan< ::cp::game::DebugReply::AddBreakpoint>&& value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::ADD_BREAKPOINT);
  ::capnp::_::PointerHelpers< ::cp::game::DebugReply::AddBreakpoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cp::game::DebugReply::AddBreakpoint> DebugReply::Builder::disownAddBreakpoint() {
  KJ_IREQUIRE((which() == DebugReply::ADD_BREAKPOINT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::AddBreakpoint>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugReply::Reader::isScriptGet() const {
  return which() == DebugReply::SCRIPT_GET;
}
inline bool DebugReply::Builder::isScriptGet() {
  return which() == DebugReply::SCRIPT_GET;
}
inline bool DebugReply::Reader::hasScriptGet() const {
  if (which() != DebugReply::SCRIPT_GET) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::Builder::hasScriptGet() {
  if (which() != DebugReply::SCRIPT_GET) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cp::game::DebugReply::ScriptGet::Reader DebugReply::Reader::getScriptGet() const {
  KJ_IREQUIRE((which() == DebugReply::SCRIPT_GET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::ScriptGet>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cp::game::DebugReply::ScriptGet::Builder DebugReply::Builder::getScriptGet() {
  KJ_IREQUIRE((which() == DebugReply::SCRIPT_GET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::ScriptGet>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::setScriptGet( ::cp::game::DebugReply::ScriptGet::Reader value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::SCRIPT_GET);
  ::capnp::_::PointerHelpers< ::cp::game::DebugReply::ScriptGet>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cp::game::DebugReply::ScriptGet::Builder DebugReply::Builder::initScriptGet() {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::SCRIPT_GET);
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::ScriptGet>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::adoptScriptGet(
    ::capnp::Orphan< ::cp::game::DebugReply::ScriptGet>&& value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::SCRIPT_GET);
  ::capnp::_::PointerHelpers< ::cp::game::DebugReply::ScriptGet>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cp::game::DebugReply::ScriptGet> DebugReply::Builder::disownScriptGet() {
  KJ_IREQUIRE((which() == DebugReply::SCRIPT_GET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::ScriptGet>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugReply::Reader::isEventStopped() const {
  return which() == DebugReply::EVENT_STOPPED;
}
inline bool DebugReply::Builder::isEventStopped() {
  return which() == DebugReply::EVENT_STOPPED;
}
inline bool DebugReply::Reader::hasEventStopped() const {
  if (which() != DebugReply::EVENT_STOPPED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::Builder::hasEventStopped() {
  if (which() != DebugReply::EVENT_STOPPED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cp::game::DebugReply::EventStopped::Reader DebugReply::Reader::getEventStopped() const {
  KJ_IREQUIRE((which() == DebugReply::EVENT_STOPPED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventStopped>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cp::game::DebugReply::EventStopped::Builder DebugReply::Builder::getEventStopped() {
  KJ_IREQUIRE((which() == DebugReply::EVENT_STOPPED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventStopped>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::setEventStopped( ::cp::game::DebugReply::EventStopped::Reader value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::EVENT_STOPPED);
  ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventStopped>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cp::game::DebugReply::EventStopped::Builder DebugReply::Builder::initEventStopped() {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::EVENT_STOPPED);
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventStopped>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::adoptEventStopped(
    ::capnp::Orphan< ::cp::game::DebugReply::EventStopped>&& value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::EVENT_STOPPED);
  ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventStopped>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cp::game::DebugReply::EventStopped> DebugReply::Builder::disownEventStopped() {
  KJ_IREQUIRE((which() == DebugReply::EVENT_STOPPED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventStopped>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugReply::Reader::isEventWatchpoint() const {
  return which() == DebugReply::EVENT_WATCHPOINT;
}
inline bool DebugReply::Builder::isEventWatchpoint() {
  return which() == DebugReply::EVENT_WATCHPOINT;
}
inline bool DebugReply::Reader::hasEventWatchpoint() const {
  if (which() != DebugReply::EVENT_WATCHPOINT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::Builder::hasEventWatchpoint() {
  if (which() != DebugReply::EVENT_WATCHPOINT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cp::game::DebugReply::EventWatchpoint::Reader DebugReply::Reader::getEventWatchpoint() const {
  KJ_IREQUIRE((which() == DebugReply::EVENT_WATCHPOINT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventWatchpoint>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cp::game::DebugReply::EventWatchpoint::Builder DebugReply::Builder::getEventWatchpoint() {
  KJ_IREQUIRE((which() == DebugReply::EVENT_WATCHPOINT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventWatchpoint>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::setEventWatchpoint( ::cp::game::DebugReply::EventWatchpoint::Reader value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::EVENT_WATCHPOINT);
  ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventWatchpoint>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cp::game::DebugReply::EventWatchpoint::Builder DebugReply::Builder::initEventWatchpoint() {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::EVENT_WATCHPOINT);
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventWatchpoint>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::adoptEventWatchpoint(
    ::capnp::Orphan< ::cp::game::DebugReply::EventWatchpoint>&& value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::EVENT_WATCHPOINT);
  ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventWatchpoint>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cp::game::DebugReply::EventWatchpoint> DebugReply::Builder::disownEventWatchpoint() {
  KJ_IREQUIRE((which() == DebugReply::EVENT_WATCHPOINT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::EventWatchpoint>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugReply::Reader::isExecute() const {
  return which() == DebugReply::EXECUTE;
}
inline bool DebugReply::Builder::isExecute() {
  return which() == DebugReply::EXECUTE;
}
inline bool DebugReply::Reader::hasExecute() const {
  if (which() != DebugReply::EXECUTE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::Builder::hasExecute() {
  if (which() != DebugReply::EXECUTE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cp::game::DebugReply::Execute::Reader DebugReply::Reader::getExecute() const {
  KJ_IREQUIRE((which() == DebugReply::EXECUTE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::Execute>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cp::game::DebugReply::Execute::Builder DebugReply::Builder::getExecute() {
  KJ_IREQUIRE((which() == DebugReply::EXECUTE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::Execute>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::setExecute( ::cp::game::DebugReply::Execute::Reader value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::EXECUTE);
  ::capnp::_::PointerHelpers< ::cp::game::DebugReply::Execute>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cp::game::DebugReply::Execute::Builder DebugReply::Builder::initExecute() {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::EXECUTE);
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::Execute>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Builder::adoptExecute(
    ::capnp::Orphan< ::cp::game::DebugReply::Execute>&& value) {
  _builder.setDataField<DebugReply::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DebugReply::EXECUTE);
  ::capnp::_::PointerHelpers< ::cp::game::DebugReply::Execute>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cp::game::DebugReply::Execute> DebugReply::Builder::disownExecute() {
  KJ_IREQUIRE((which() == DebugReply::EXECUTE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::cp::game::DebugReply::Execute>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t DebugReply::ScriptInfo::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugReply::ScriptInfo::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DebugReply::ScriptInfo::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DebugReply::ScriptInfo::Reader::hasSourceName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::ScriptInfo::Builder::hasSourceName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DebugReply::ScriptInfo::Reader::getSourceName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DebugReply::ScriptInfo::Builder::getSourceName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::ScriptInfo::Builder::setSourceName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DebugReply::ScriptInfo::Builder::initSourceName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DebugReply::ScriptInfo::Builder::adoptSourceName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DebugReply::ScriptInfo::Builder::disownSourceName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t DebugReply::AddBreakpoint::Reader::getBreakpointId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugReply::AddBreakpoint::Builder::getBreakpointId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DebugReply::AddBreakpoint::Builder::setBreakpointId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DebugReply::ScriptGet::Reader::hasSourceLines() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::ScriptGet::Builder::hasSourceLines() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader DebugReply::ScriptGet::Reader::getSourceLines() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder DebugReply::ScriptGet::Builder::getSourceLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::ScriptGet::Builder::setSourceLines( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void DebugReply::ScriptGet::Builder::setSourceLines(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder DebugReply::ScriptGet::Builder::initSourceLines(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DebugReply::ScriptGet::Builder::adoptSourceLines(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> DebugReply::ScriptGet::Builder::disownSourceLines() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::cp::game::DebugReply::EventStopped::Which DebugReply::EventStopped::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline  ::cp::game::DebugReply::EventStopped::Which DebugReply::EventStopped::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool DebugReply::EventStopped::Reader::isBreakpointId() const {
  return which() == DebugReply::EventStopped::BREAKPOINT_ID;
}
inline bool DebugReply::EventStopped::Builder::isBreakpointId() {
  return which() == DebugReply::EventStopped::BREAKPOINT_ID;
}
inline  ::int32_t DebugReply::EventStopped::Reader::getBreakpointId() const {
  KJ_IREQUIRE((which() == DebugReply::EventStopped::BREAKPOINT_ID),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugReply::EventStopped::Builder::getBreakpointId() {
  KJ_IREQUIRE((which() == DebugReply::EventStopped::BREAKPOINT_ID),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DebugReply::EventStopped::Builder::setBreakpointId( ::int32_t value) {
  _builder.setDataField<DebugReply::EventStopped::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DebugReply::EventStopped::BREAKPOINT_ID);
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool DebugReply::EventStopped::Reader::isSignal() const {
  return which() == DebugReply::EventStopped::SIGNAL;
}
inline bool DebugReply::EventStopped::Builder::isSignal() {
  return which() == DebugReply::EventStopped::SIGNAL;
}
inline  ::int32_t DebugReply::EventStopped::Reader::getSignal() const {
  KJ_IREQUIRE((which() == DebugReply::EventStopped::SIGNAL),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugReply::EventStopped::Builder::getSignal() {
  KJ_IREQUIRE((which() == DebugReply::EventStopped::SIGNAL),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DebugReply::EventStopped::Builder::setSignal( ::int32_t value) {
  _builder.setDataField<DebugReply::EventStopped::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, DebugReply::EventStopped::SIGNAL);
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DebugReply::EventStopped::Reader::getScriptId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugReply::EventStopped::Builder::getScriptId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DebugReply::EventStopped::Builder::setScriptId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DebugReply::EventStopped::Reader::getLine() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugReply::EventStopped::Builder::getLine() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void DebugReply::EventStopped::Builder::setLine( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DebugReply::EventWatchpoint::Reader::getWatchpointId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugReply::EventWatchpoint::Builder::getWatchpointId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DebugReply::EventWatchpoint::Builder::setWatchpointId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DebugReply::EventWatchpoint::Reader::getScriptId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugReply::EventWatchpoint::Builder::getScriptId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void DebugReply::EventWatchpoint::Builder::setScriptId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t DebugReply::EventWatchpoint::Reader::getLine() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t DebugReply::EventWatchpoint::Builder::getLine() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void DebugReply::EventWatchpoint::Builder::setLine( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool DebugReply::EventWatchpoint::Reader::hasLocalNames() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::EventWatchpoint::Builder::hasLocalNames() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader DebugReply::EventWatchpoint::Reader::getLocalNames() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder DebugReply::EventWatchpoint::Builder::getLocalNames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::EventWatchpoint::Builder::setLocalNames( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void DebugReply::EventWatchpoint::Builder::setLocalNames(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder DebugReply::EventWatchpoint::Builder::initLocalNames(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DebugReply::EventWatchpoint::Builder::adoptLocalNames(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> DebugReply::EventWatchpoint::Builder::disownLocalNames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugReply::EventWatchpoint::Reader::hasLocalValues() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::EventWatchpoint::Builder::hasLocalValues() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::cp::game::ScriptValue>::Reader DebugReply::EventWatchpoint::Reader::getLocalValues() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::cp::game::ScriptValue>::Builder DebugReply::EventWatchpoint::Builder::getLocalValues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void DebugReply::EventWatchpoint::Builder::setLocalValues( ::capnp::List< ::cp::game::ScriptValue>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::cp::game::ScriptValue>::Builder DebugReply::EventWatchpoint::Builder::initLocalValues(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void DebugReply::EventWatchpoint::Builder::adoptLocalValues(
    ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptValue>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::cp::game::ScriptValue>> DebugReply::EventWatchpoint::Builder::disownLocalValues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::cp::game::ScriptValue>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool DebugReply::Execute::Reader::hasConsoleOutput() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DebugReply::Execute::Builder::hasConsoleOutput() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DebugReply::Execute::Reader::getConsoleOutput() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DebugReply::Execute::Builder::getConsoleOutput() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DebugReply::Execute::Builder::setConsoleOutput( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DebugReply::Execute::Builder::initConsoleOutput(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DebugReply::Execute::Builder::adoptConsoleOutput(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DebugReply::Execute::Builder::disownConsoleOutput() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DebugReply::Execute::Reader::getError() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool DebugReply::Execute::Builder::getError() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DebugReply::Execute::Builder::setError(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_ace601020add72c7_
